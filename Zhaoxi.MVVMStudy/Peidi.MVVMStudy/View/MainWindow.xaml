<Window x:Class="Peidi.MVVMStudy.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Peidi.MVVMStudy"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:vm="clr-namespace:Peidi.MVVMStudy.ViewModel"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Window.Resources>
        <!--<vm:MainViewModel x:Key="mainVM"/>-->

        <sys:String x:Key="str">123</sys:String>
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <ControlTemplate TargetType="{x:Type TextBox}" x:Key="ValidTemplate">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                    <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </Border>
                <TextBlock Grid.Row="1" Text="{Binding (Validation.Errors)[0].ErrorContent,RelativeSource={RelativeSource AncestorType=TextBox,Mode=FindAncestor}}"
                           Foreground="Red" Name="txtError"  Visibility="Collapsed"></TextBlock>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                </Trigger>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="Visibility" Value="Visible" TargetName="txtError"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <!--<model:InfoModel Name="Jovan" Age="28" x:Key="info"/>-->
        <!--耦合-->



    </Window.Resources>
    <!--<Window.DataContext>
        <StaticResource ResourceKey="mainVM"/>
    </Window.DataContext>-->
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <StackPanel DataContext="{Binding InfoModel}">
            <TextBox FontSize="30" Name="tb"
               Template="{StaticResource ValidTemplate}">
                <TextBox.Text>
                    <Binding Path="Name" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" ValidatesOnDataErrors="True">
                        <!--<Binding.ValidationRules>
                             依赖属性的验证-》验证回调
                            <ExceptionValidationRule/>
                            自定义的ValidationRule，依赖属性还是数据Model都适用，
                            如果使用这种方式，每个绑定都需要对应一个ValidationRule
                        </Binding.ValidationRules>-->
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <TextBox FontSize="30"
                     Template="{StaticResource ValidTemplate}">
                <TextBox.Text>
                    <Binding Path="Age" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay" ValidatesOnDataErrors="True">
                        <!--<Binding.ValidationRules>
                             依赖属性的验证-》验证回调
                            <ExceptionValidationRule/>
                            自定义的ValidationRule，依赖属性还是数据Model都适用，
                            如果使用这种方式，每个绑定都需要对应一个ValidationRule
                        </Binding.ValidationRules>-->
                    </Binding>
                </TextBox.Text>
            </TextBox>
                     
            <Button Content="Button" FontSize="30" Click="Button_Click"/>
        </StackPanel>

        <ItemsControl Grid.Column="1" ItemsSource="{Binding InfoList}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <TextBlock Text="{Binding Name}" Margin="5,0" FontSize="30"/>
                        <TextBlock Text="{Binding Age}" Margin="5,0" FontSize="30"/>
                    </StackPanel>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Grid>
</Window>
